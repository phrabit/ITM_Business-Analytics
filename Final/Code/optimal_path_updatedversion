{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1Rw8JfboSyAgQTPC_7uHQIiaRyi9gwqPB","timestamp":1700720047905}],"collapsed_sections":["czQ-EVfLpXj-","5sPAAnabpc1W","_qA4fyRKp4f5","-kiT4kUXrFrE"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"BNSIBoYpNpDv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Import Libraries"],"metadata":{"id":"czQ-EVfLpXj-"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jdYZXcrtNhrz"},"outputs":[],"source":["! pip install h3\n","! pip install geojsonio\n","! pip install geopy\n","! pip install tqdm"]},{"cell_type":"code","source":["import h3\n","import folium\n","import json\n","import geopandas as gpd\n","import pandas as pd\n","import folium\n","from geopy.distance import distance\n","from geopy.distance import great_circle\n","import matplotlib.pyplot as plt\n","from shapely.geometry import Point\n","from shapely.geometry import Polygon\n","from tqdm import tqdm\n","import time\n","import networkx as nx\n","from pyproj import CRS"],"metadata":{"id":"TxNzJYyWYtHF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Fill Seoul with h3 hexagons"],"metadata":{"id":"5sPAAnabpc1W"}},{"cell_type":"code","source":["# 전국 시,도 경계 위치 데이터\n","with open('/content/drive/MyDrive/B A 데이터 모음/01MCLP/grid/전국시도경계데이터.json', 'r') as file:\n","    korea_boundary = json.load(file)"],"metadata":{"id":"vKYjU_JEl4nl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 'adm_nm' 필드에 '서울특별시'가 포함된 특성들만 필터링\n","seoul_features = [feature for feature in korea_boundary['features']\n","                  if '서울특별시' in feature['properties']['CTP_KOR_NM']]\n","\n","# 필터링된 특성들을 새로운 GeoJSON 객체로 생성\n","seoul_boundary = {\n","    \"type\": \"FeatureCollection\",\n","    \"features\": seoul_features\n","}"],"metadata":{"id":"HNt3TiTKTzcH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 서울 경계 내의 모든 지점에 대해 H3 인덱스 생성\n","resolution = 10  # 해상도 설정\n","h3_indexes = set()  # H3 인덱스를 저장할 집합\n","for feature in seoul_boundary['features']:\n","    # GeoJSON-like dictionary 생성\n","    geojson_polygon = {\"type\": \"Polygon\", \"coordinates\": feature['geometry']['coordinates']}\n","    # polyfill을 사용하여 경계 내부를 채움\n","    hexagons = h3.polyfill(geojson_polygon, resolution, geo_json_conformant=True)\n","    h3_indexes.update(hexagons)"],"metadata":{"id":"ecxeyHWDbFX_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Visualize Seoul painted by h3 with folium<br>\n","Store to seoul_h3_map.html"],"metadata":{"id":"N0WLqdR_kJg2"}},{"cell_type":"code","source":["# folium 지도에 서울 전역의 H3 그리드 추가\n","map_seoul = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","for h3_index in h3_indexes:\n","    hex_boundary = h3.h3_to_geo_boundary(h3_index)  # 수정됨\n","    folium.Polygon(locations=[list(coord) for coord in hex_boundary], color='blue', fill=True).add_to(map_seoul)\n","\n","\n","# 지도를 저장\n","map_seoul.save(\"seoul_h3_map.html\")"],"metadata":{"id":"XJM8FAX-kH9y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Delete h3 included in the no-fly zone (P-73)"],"metadata":{"id":"_qA4fyRKp4f5"}},{"cell_type":"code","source":["# center_coord에 각 h3의 중심점 좌표를 저장함\n","center_coords = {}\n","\n","for h3_index in h3_indexes:\n","    center_coord = h3.h3_to_geo(h3_index)\n","    center_coords[h3_index] = center_coord\n"],"metadata":{"id":"t8jUzEcjdx8V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 비행금지구역 P-73은 서울 용산 전쟁기념관 반경 2해리(3.704m)\n","# 비교할 좌표 설정 (용산 전쟁기념관)\n","reference_coord = (37.536500, 126.977100)\n","\n","# 거리 기준 설정 (3.704km)\n","distance_threshold = 3.704  # km\n","\n","# 각 h3의 중심점 좌표와 전쟁기념관의 거리가 3.704 이하라면 제거\n","filtered_h3_indexes = set()\n","for h3_index in h3_indexes:\n","    center_coord = center_coords[h3_index]\n","    dist = distance(center_coord, reference_coord).kilometers\n","    if dist >= distance_threshold:\n","        filtered_h3_indexes.add(h3_index)"],"metadata":{"id":"TOdVwWcAeXyH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Visualize Seoul painted by h3 with folium <br>\n","Store to seoul_h3_map_no_p73.html"],"metadata":{"id":"pUNpd72hlHsm"}},{"cell_type":"code","source":["# folium 지도에 서울 전역의 H3 그리드 추가\n","map_seoul = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","for h3_index in filtered_h3_indexes:\n","    hex_boundary = h3.h3_to_geo_boundary(h3_index)  # 수정됨\n","    folium.Polygon(locations=[list(coord) for coord in hex_boundary], color='blue', fill=True).add_to(map_seoul)\n","\n","\n","# 지도를 저장\n","map_seoul.save(\"seoul_h3_map_no_p73.html\")"],"metadata":{"id":"1OKttG1seXvf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2nDNZdeAkr9w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Combine air taxi travel route and road information"],"metadata":{"id":"-kiT4kUXrFrE"}},{"cell_type":"code","source":["# 출처: 데이터 오픈마켓 - 행정안전부 (도로명주소)도로구간 http://data.nsdi.go.kr/dataset/12902\n","road = gpd.read_file('/content/drive/MyDrive/B A 데이터 모음/01MCLP/grid/서울도로shp/Z_KAIS_TL_SPRD_MANAGE_11000.shp', encoding='cp949')"],"metadata":{"id":"2GIgSBETqwiC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["selected_columns = ['RDS_MAN_NO', 'RN', 'RN_CD', 'ENG_RN', 'geometry', 'ROAD_BT', 'ROAD_LT', 'BSI_INT']\n","road = road[selected_columns]"],"metadata":{"id":"N7S9BdlzqwgK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 폭이 높은 곳에서 낮은 곳 순으로\n","road = road.sort_values(by='ROAD_BT', ascending=False)"],"metadata":{"id":"C0bcDMjXH08u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["road.plot()\n","plt.show()"],"metadata":{"id":"K1UyzATvLRa_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Cost according to each h3 and the width of the road passing through it <br>\n","Store to h3_cost dataframe"],"metadata":{"id":"3gto3iwmjJpJ"}},{"cell_type":"code","source":["# H3 인덱스를 육각형으로 변환\n","h3_hexagons = {h3_index: Polygon(h3.h3_to_geo_boundary(h3_index, geo_json=True)) for h3_index in filtered_h3_indexes}\n","\n","# H3 인덱스와 Road 데이터 매칭 및 Road Cost 계산\n","h3_road_cost = {}\n","\n","# road 데이터를 GeoDataFrame으로 변환\n","gdf_road = gpd.GeoDataFrame(road, geometry='geometry')\n","\n","# 좌표 체계 변환\n","gdf_road = gdf_road.to_crs(CRS('EPSG:4326'))"],"metadata":{"id":"5y_2_9Rfj3XT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["start_time = time.time()\n","\n","for h3_index, hexagon in h3_hexagons.items():\n","    # intersects 함수를 사용하여 교차하는 도로 찾기\n","    intersecting_roads = gdf_road[gdf_road.intersects(hexagon)]\n","\n","    if not intersecting_roads.empty:\n","        # 첫 번째 교차하는 도로의 ROAD_BT 사용\n","        road_cost = 1 / intersecting_roads.iloc[0]['ROAD_BT']\n","        h3_road_cost[h3_index] = road_cost\n","    else:\n","        h3_road_cost[h3_index] = None  # 도로가 없는 경우\n","\n","# 결과 DataFrame 생성\n","h3_cost = pd.DataFrame.from_dict(h3_road_cost, orient='index', columns=['road_cost'])\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"],"metadata":{"id":"YU0GGMb_eycO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# result_df의 인덱스가 h3값, road_cost가 도로폭의 역수를 가진 cost값.\n","# 도로와 만나지 않는 h3가 있기 때문에 NaN값이 존재함.\n","print(h3_cost)"],"metadata":{"id":"fc0L5RP2nQdd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# result_df 시각화. NaN값은 표시하지 않도록 함.\n","\n","# folium 지도 생성\n","map_seoul = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","\n","# road_cost 컬럼이 NaN이 아닌 H3 인덱스 필터링\n","valid_h3_indexes = h3_cost[h3_cost['road_cost'].notna()].index\n","\n","# 필터링된 H3 인덱스를 지도에 시각화\n","for h3_index in valid_h3_indexes:\n","    hex_boundary = h3.h3_to_geo_boundary(h3_index, geo_json=True)\n","    # 위도와 경도 순서를 올바르게 조정\n","    corrected_boundary = [(coord[1], coord[0]) for coord in hex_boundary]\n","    # 각 육각형을 폴리곤으로 지도에 추가\n","    folium.Polygon(locations=corrected_boundary,\n","                   color='blue',\n","                   fill=True).add_to(map_seoul)\n","\n","# 지도를 HTML 파일로 저장\n","map_seoul.save(\"seoul_h3_map_with_valid_road_cost.html\")"],"metadata":{"id":"T3rEH0exq9-x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Cost by River Data"],"metadata":{"id":"-l-_iAfS_o-J"}},{"cell_type":"code","source":["# 출처: 데이터 오픈마켓 - 국토지리정보원 하천경계 http://data.nsdi.go.kr/dataset/20180927ds0054\n","river = gpd.read_file('/content/drive/MyDrive/B A 데이터 모음/01MCLP/grid/NGII_CDM_하천경계/Z_NGII_N3A_E0010001.shp', encoding='cp949')"],"metadata":{"id":"ujxHBBun_gDn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 출처: 데이터 오픈마켓 - 국토지리정보원 행정경계(시도) http://data.nsdi.go.kr/dataset/20180927ds0058\n","sido = gpd.read_file('/content/drive/MyDrive/B A 데이터 모음/01MCLP/grid/NGII_CDM_행정경계(시도)/Z_NGII_N3A_G0010000.shp', encoding='cp949')"],"metadata":{"id":"Jm-ALFWC_ihX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["river.to_crs(CRS('EPSG:4326'))"],"metadata":{"id":"J1hpRtRWAXXZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seoul = sido[sido['NAME'] == '서울특별시']\n","seoul.to_crs(CRS('EPSG:4326'))"],"metadata":{"id":"6vKbZaamAZIN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 서울 지역에 해당하는 'river' 데이터 추출\n","river_seoul = gpd.overlay(river, seoul, how='intersection')"],"metadata":{"id":"94zqFfSTAcDi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["river_seoul.plot()\n","plt.show()"],"metadata":{"id":"m1wvR653dpIP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# H3 인덱스와 Road 데이터 매칭 및 Road Cost 계산\n","h3_river_cost = {}\n","\n","# road 데이터를 GeoDataFrame으로 변환\n","gdf_river = gpd.GeoDataFrame(river_seoul, geometry='geometry')\n","\n","# 좌표 체계 변환\n","gdf_river = gdf_river.to_crs(CRS('EPSG:4326'))"],"metadata":{"id":"t8TS1W_PAPgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["start_time = time.time()\n","\n","for h3_index, hexagon in h3_hexagons.items():\n","    intersecting_rivers = gdf_river[gdf_river.intersects(hexagon)]\n","\n","    if not intersecting_rivers.empty:\n","        river_cost = 0\n","        h3_river_cost[h3_index] = river_cost\n","    else:\n","        h3_river_cost[h3_index] = None\n","\n","# 결과 DataFrame 생성\n","h3_cost_river = pd.DataFrame.from_dict(h3_river_cost, orient='index', columns=['river_cost'])\n","\n","end_time = time.time()\n","execution_time = end_time - start_time\n","print(f\"Execution time: {execution_time} seconds\")"],"metadata":{"id":"YbKjYayFBYVD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Merge two cost dataframe"],"metadata":{"id":"BYkPwcoEGUM5"}},{"cell_type":"code","source":["costs = h3_cost.merge(h3_cost_river, left_index=True, right_index=True)"],"metadata":{"id":"dJ8zYqmbGSth"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","# 'total_cost' 열을 생성하고 'road_cost'와 'river_cost'의 합을 저장\n","# 두 열이 모두 NaN인 경우에는 total_cost를 NaN으로 설정\n","costs['total_cost'] = np.where(costs['road_cost'].isna() & costs['river_cost'].isna(),\n","                                   np.nan,\n","                                   costs['road_cost'].fillna(0) + costs['river_cost'].fillna(0))\n"],"metadata":{"id":"0yfjU_P5G3Up"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["costs"],"metadata":{"id":"uUCPbi_8HWgH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Calculate the shortest distance with the Dijkstra algorithm"],"metadata":{"id":"E4vEvyMHjWIU"}},{"cell_type":"code","source":["final_station = pd.read_csv(\"/content/drive/MyDrive/B A 데이터 모음/01MCLP/grid/final_station.csv\")"],"metadata":{"id":"E70q_2yI3Ok7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 각 coord 값을 변수에 저장하고 문자열을 튜플로 변환\n","coord_values = [tuple(map(float, coord.strip('()').split(','))) for coord in final_station['coord']]\n","\n","# 결과 출력\n","for i, coord in enumerate(coord_values):\n","    print(f'coord{i+1}: {coord}')"],"metadata":{"id":"AruC8Me63Pr9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assuming final_station and filtered_h3_indexes are defined elsewhere in your code\n","\n","# 각 coord 값을 변수에 저장하고 문자열을 튜플로 변환\n","coord_values = [tuple(map(float, coord.strip('()').split(','))) for coord in final_station['coord']]\n","\n","# 결과 출력\n","for i, coord in enumerate(coord_values):\n","    print(f'coord{i+1}: {coord}')\n","\n","# H3 인덱스와 coord 값을 저장할 딕셔너리\n","h3_coord_mapping = {}\n","\n","# 각 H3 인덱스와 coord 값을 비교하여 매핑\n","for i, coord in enumerate(coord_values):\n","    point = Point(coord)\n","    for h3_index in filtered_h3_indexes:\n","        hex_boundary = h3.h3_to_geo_boundary(h3_index, geo_json=True)\n","        polygon = Polygon(hex_boundary)\n","        if polygon.contains(point):\n","            h3_coord_mapping[f'coord{i+1}'] = (h3_index, coord)\n","            break\n","\n","# 결과 출력\n","for key, value in h3_coord_mapping.items():\n","    print(f'{key}: H3 Index - {value[0]}, Coord - {value[1]}')"],"metadata":{"id":"d9FLX7uS3UtI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## total cost 적용\n","\n","# 비어있는 그래프 생성\n","G = nx.Graph()\n","\n","# 각 H3 인덱스에 대해 인접한 육각형을 찾고, 그래프에 에지와 비용 추가\n","for h3_index in filtered_h3_indexes:\n","    neighbors = h3.k_ring(h3_index, 1)\n","    for neighbor in neighbors:\n","        if neighbor != h3_index and neighbor in filtered_h3_indexes:\n","            # road_cost를 에지의 가중치로 사용\n","            cost = costs.at[h3_index, 'total_cost']\n","            # 가중치가 없는 경우 기본값 설정 (예: 1)\n","            if pd.isna(cost):\n","                cost = 1\n","            G.add_edge(h3_index, neighbor, weight=cost)\n","\n","# 이제 G 그래프에는 H3 육각형 간의 연결과 해당 연결의 비용이 포함되어 있음"],"metadata":{"id":"Pmg0nDKbHyx-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import itertools\n","\n","# Creating all combinations of two coordinates\n","combinations = list(itertools.combinations(h3_coord_mapping.keys(), 2))\n","\n","optimal_paths = {}\n","\n","# Finding the optimal path for each combination\n","for combo in combinations:\n","    source = h3_coord_mapping[combo[0]][0]\n","    target = h3_coord_mapping[combo[1]][0]\n","    path = nx.dijkstra_path(G, source, target)\n","    optimal_paths[combo] = path"],"metadata":{"id":"njhb1PjaIBFG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["map_seoul = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","\n","for path in optimal_paths.values():\n","    # Draw the path lines\n","    line_coords = []\n","    for h3_index in path:\n","        hex_boundary = h3.h3_to_geo_boundary(h3_index)\n","        hex_centroid = h3.h3_to_geo(h3_index)\n","        line_coords.append(hex_centroid)\n","        # folium.Polygon(locations=[list(coord) for coord in hex_boundary], color='blue', fill=True).add_to(map_seoul)\n","\n","    # Draw the start and end hexagons in red\n","    for h3_index in [path[0], path[-1]]:\n","        hex_boundary = h3.h3_to_geo_boundary(h3_index)\n","        folium.Polygon(locations=[list(coord) for coord in hex_boundary], color='red', fill=True).add_to(map_seoul)\n","\n","    # Draw the line\n","    folium.PolyLine(locations=line_coords, color='blue').add_to(map_seoul)\n","\n","# 지도를 저장\n","map_seoul.save(\"optimal_paths.html\")"],"metadata":{"id":"fs1T98wrIEza"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i, (path_key, path) in enumerate(optimal_paths.items()):\n","    map_path = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","    line_coords = []\n","\n","    for h3_index in path:\n","        hex_centroid = h3.h3_to_geo(h3_index)\n","        line_coords.append(hex_centroid)\n","\n","    folium.PolyLine(locations=line_coords, color='blue').add_to(map_path)\n","\n","    # 시작점과 끝점을 붉은색으로 표시\n","    for h3_index in [path[0], path[-1]]:\n","        hex_boundary = h3.h3_to_geo_boundary(h3_index)\n","        folium.Polygon(locations=[list(coord) for coord in hex_boundary], color='red', fill=True).add_to(map_path)\n","\n","    map_path.save(f\"path_{i}.html\")\n"],"metadata":{"id":"fE6yQL-PWoN3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from geopy.distance import geodesic\n","import folium\n","\n","def calculate_distance(path):\n","    total_distance = 0\n","    for i in range(len(path) - 1):\n","        point1 = h3.h3_to_geo(path[i])\n","        point2 = h3.h3_to_geo(path[i + 1])\n","        total_distance += geodesic(point1, point2).kilometers\n","    return total_distance\n","\n","# 평균 이동 속도(150km/h)\n","average_speed = 150  # 가정한 평균 속도\n","\n","for i, (path_key, path) in enumerate(optimal_paths.items()):\n","    map_path = folium.Map(location=[37.5665, 126.9780], zoom_start=10)\n","    line_coords = []\n","\n","    for h3_index in path:\n","        hex_centroid = h3.h3_to_geo(h3_index)\n","        line_coords.append(hex_centroid)\n","\n","    distance = calculate_distance(path)\n","    estimated_time = distance / average_speed + 0.2  # 시간 = 거리 / 속도\n","\n","    folium.PolyLine(locations=line_coords, color='blue').add_to(map_path)\n","\n","    # 출발점에 녹색 마커 추가\n","    start_point = h3.h3_to_geo(path[0])\n","    folium.Marker(\n","        start_point,\n","        popup=\"출발점\",\n","        icon=folium.Icon(color='green')\n","    ).add_to(map_path)\n","\n","    # 도착점에 빨간색 마커와 경로 정보 추가\n","    end_point = h3.h3_to_geo(path[-1])\n","    folium.Marker(\n","        end_point,\n","        popup=f\"도착점\\n거리: {distance:.2f} km\\n예상 시간: {estimated_time:.2f} 시간\",\n","        icon=folium.Icon(color='red')\n","    ).add_to(map_path)\n","\n","    map_path.save(f\"path_test{i}.html\")\n"],"metadata":{"id":"DCjb1feLm5d9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"JgcbYISNnXjD"},"execution_count":null,"outputs":[]}]}